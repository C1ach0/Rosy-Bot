const client = require("../../index");
const { QuickDB } = require("quick.db")
const {
    MessageEmbed,
    Permissions
} = require('discord.js')

client.on("messageReactionAdd", async (reaction, user) => {
    const db = new QuickDB({
        'table': `Guild_${reaction.message.guildId}`
    })
    
    if (reaction.message.partial) await reaction.message.fetch();
    if (reaction.partial) await reaction.fetch();
    
    let message = reaction.message;
    if (!message) return;
    if (user.bot) return;
    
    let logsChannel = message.guild.channels.cache.find(c => c.id === db.get(`LogsChannel`));

    let already = new MessageEmbed()
        .setColor("RED")
        .setAuthor(`⛔ | Ish no ..`)
        .setDescription(`You can have only one ticket from open at a time.`);

    let success = new MessageEmbed()
        .setColor("GREEN")
        .setTitle(`🎟️ | Ticket System`)
        .setDescription(`Please explain the reason for your request.A team member will take care of your ticket shortly.`);

    let split = '';
    let usr = user.id.split(split);
    for (var i = 0; i < usr.length; i++) usr[i] = usr[i].trim();

    if (message.embeds.length === 1 && message.embeds[0].title === 'Ticket System' && message.embeds[0].description === 'React with 🎟️ to create a ticket.') {

        
        if (reaction.emoji.name === "🎟️") {

            
            if (!message.guild.channels.cache.find(c => c.name === `ticket-${usr[0]}${usr[1]}${usr[2]}${usr[3]}`)) {
                const staffRole = db.get('Staffrole')
                let role = message.guild.roles.cache.get(staffRole) || message.guild.roles.cache.find(r => r.name === "Ticket Support")
                if (!role) {

                    
                    message.guild.roles.create({
                        name: "Ticket Support",
                        
                        reason: 'Staff needs this role to see tickets.'
                    });
                    message.channel.send(`Please, please react again to the ticket creation message.`).then(m => setTimeout(() => {
                        m.delete()
                    }, 5000)).catch(e => {});
                    reaction.users.remove(user.id);
                    return
                }
                let categoria = message.guild.channels.cache.find(c => c.name == "tickets" && c.type == "GUILD_CATEGORY");
                if (!categoria) categoria = await message.guild.channels.create("tickets", {
                    type: "GUILD_CATEGORY",
                    position: 1
                }).catch(e => {
                    let embedErr = new MessageEmbed().setDescription(`\\📛 **Erreur:** ${argument} \\📛`).setColor("RED")
                    return message.channel.send({embeds: [embedErr]})
                });
                

                let permsToHave = ['VIEW_CHANNEL', 'SEND_MESSAGES', 'ATTACH_FILES', 'READ_MESSAGE_HISTORY', 'ADD_REACTIONS']

                message.guild.channels.create(`ticket-${usr[0]}${usr[1]}${usr[2]}${usr[3]}`, {
                    permissionOverwrites: [{
                            deny: 'VIEW_CHANNEL',
                            id: message.guild.id
                        },
                        {
                            allow: permsToHave,
                            id: user.id
                        },
                        {
                            allow: permsToHave,
                            id: role.id
                        }
                    ],
                    parent: categoria.id,
                    reason: `This user needs help.`,
                    topic: `**ID:** ${user.id} -- **Tag:** ${user.tag}`
                }).then(channel => {

                    let createdEmbed = new MessageEmbed()
                        .setAuthor(`📝 | Open Ticket`)
                        .setTimestamp()
                        .setFooter(`Ticket System`, client.user.displayAvatarURL())
                        .setDescription(`A user opens a ticket and waits for his request.`)
                        .addField(`Informations`, `**User :** \`${user.tag}\`\n**ID :** \`${user.id}\`\n**Ticket :** ${channel}`);

                    if (logsChannel) logsChannel.send({
                        embeds: [createdEmbed]
                    });
                    channel.send(`${user}`)
                    channel.send({embeds: [success]})
                    let embed2 = new MessageEmbed()
                        .setColor("GREEN")
                        .setDescription(`React with 🗑️ to close the ticket or do not react if you have other requests.`);
                    channel.send({embeds: [embed2]}).then(m => m.react(`🗑️`));
                    db.set(`ticket.ticket-${usr[0]}${usr[1]}${usr[2]}${usr[3]}`, {
                        user: user.id
                    });
                })
                
                reaction.users.remove(user.id);
                return;
            } else {
                
                reaction.users.remove(user.id);
                message.reply({
                    embeds: [already]
                }).then(m => setTimeout(() => {
                    m.delete()
                }, 5000)).catch(e => {});
            }
        } else {
            reaction.users.remove(user.id);
        }
    }

    // ========================= //

    if (message.embeds.length === 1 && message.embeds[0].description === `React with 🗑️ to close the ticket or do not react if you have other requests.`) {
        if (reaction.emoji.name === "🗑️") {
            if (user.id === db.get(`ticket.${message.channel.name}.user`)) {

                let deletedEmbed = new MessageEmbed()
                    .setAuthor(`🗑️ | Closed Ticket`)
                    .setDescription(`The author has confirmed the closure of the ticket.`)
                    .setTimestamp()
                    .setFooter(`Ticket System`, client.user.displayAvatarURL())
                    .addField(`Informations`, `**User :** \`${user.tag}\`\n**ID :** \`${user.id}\`\n**Ticket :** \`${message.channel.name}\``);

                if (logsChannel) logsChannel.send({
                    embeds: [deletedEmbed]
                });

                message.channel.delete();

            }
        }
    }
})